import unittest
from Bubble import BubbleSort
from Selection import SelectionSort

class TestBubbleSortingAlgorithms(unittest.TestCase):

#TEST CASES:   
    def test_steps_BubbleSort(self):
        cases = [                               #Test cases
        ([5, 4, 3, 2, 1, 0], [0, 1, 2, 3, 4, 5]),
        ([1], [1]),
        ([1, 2, 3, 4, 9], [1, 2, 3, 4, 9])
        ]

            #Bubble sort
        for test, expectedResult in cases:
            self.assertEqual(BubbleSort(test), expectedResult)
            #Selection sort
        for test, expectedResult in cases:
                self.assertEqual(SelectionSort(test), expectedResult)


    def test_nochange(self):
        nochange = [1, 2, 5, 10]    #Test Data
        nochange_steps = [1, 2, 5, 10]  #Expected output for the test
        #Bubble sort
        self.assertEqual(BubbleSort(nochange), nochange_steps)
        #Selection sort
        self.assertEqual(SelectionSort(nochange), [1, 2, 5, 10])


    def test_same(self):
        same = [8, 8, 8]    #Test Data
        #Bubble sort
        self.assertEqual(BubbleSort(same), same)    #The output is similar to the test data
        #Selection sort    
        self.assertEqual(SelectionSort(same), same)


    def test_single(self):
        single = [1]     #Test Data
        #Bubble sort
        self.assertEqual(BubbleSort(single), single)    #The output is similar to the test data
        #Selection sort
        self.assertEqual(SelectionSort(single), single)


if __name__ == '__main__':
    unittest.main()
